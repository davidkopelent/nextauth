generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model diary {
  id                    BigInt    @id @default(autoincrement())
  user_id               BigInt    @default(autoincrement())
  entry_date            DateTime? @db.Timestamptz(6)
  accomplishment        String?
  challenges            String?
  learning              String?
  feeling               String?
  additional_reflection String?
  users                 users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model earnings {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  admin_id        BigInt            @default(autoincrement())
  group_id        BigInt            @default(autoincrement())
  total_amount    Decimal           @db.Decimal
  month_year      String            @db.VarChar(7)
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  users           users             @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  groups          groups            @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payout_earnings payout_earnings[]

  @@unique([admin_id, group_id, month_year])
}

model event_attendees {
  attendee_id BigInt @default(autoincrement())
  event_id    BigInt @default(autoincrement())
  users       users  @relation(fields: [attendee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  events      events @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([attendee_id, event_id])
}

model events {
  id              BigInt            @id @default(autoincrement())
  group_id        BigInt            @default(autoincrement())
  event_date      DateTime          @default(now()) @db.Timestamptz(6)
  description     String?           @db.VarChar(256)
  place           String            @db.VarChar(256)
  event_attendees event_attendees[]
  groups          groups            @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model group_members {
  user_id                BigInt    @default(autoincrement())
  group_id               BigInt    @default(autoincrement())
  price                  Decimal   @db.Decimal
  stripe_subscription_id String    @db.VarChar(256)
  subscription_status    String    @db.VarChar(256)
  joined_at              DateTime  @default(now()) @db.Timestamptz(6)
  canceled_at            DateTime? @db.Timestamptz(6)
  last_payment_date      DateTime? @db.Timestamptz(6)
  next_payment_date      DateTime? @db.Timestamptz(6)
  created_at             DateTime  @default(now()) @db.Timestamptz(6)
  updated_at             DateTime  @default(now()) @db.Timestamptz(6)
  completion_rate        Decimal?  @default(0) @db.Decimal
  groups                 groups    @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                  users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, group_id])
  @@unique([user_id, group_id], map: "unique_user_group_pair")
}

model groups {
  id                   BigInt                 @id @default(autoincrement())
  admin_id             BigInt                 @default(autoincrement())
  name                 String                 @db.VarChar(256)
  url                  String                 @unique @db.VarChar(256)
  bio                  String                 @db.VarChar(256)
  about                String?
  members              Int                    @default(0)
  price                Decimal                @default(3) @db.Decimal
  created_at           DateTime               @default(now()) @db.Timestamptz(6)
  cover_image_url      String?
  logo_image_url       String?
  onboarding_form      Boolean?               @default(false)
  welcome_message      String?
  lessons_count        BigInt?                @default(0)
  posts_count          BigInt?                @default(0)
  channels             channels[]
  earnings             earnings[]
  events               events[]
  group_members        group_members[]
  users                users                  @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lessons              lessons[]
  onboarding_forms     onboarding_forms[]
  onboarding_questions onboarding_questions[]
  payments             payments[]
  posts                posts[]

  @@index([url], map: "idx_groups_url")
}

model lesson_comment_likes {
  comment_id      BigInt          @default(autoincrement())
  user_id         BigInt          @default(autoincrement())
  liked_at        DateTime        @default(now()) @db.Timestamptz(6)
  lesson_comments lesson_comments @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([comment_id, user_id])
}

model lesson_comments {
  id                   BigInt                 @id @default(autoincrement())
  page_id              BigInt                 @default(autoincrement())
  author_id            BigInt                 @default(autoincrement())
  content              String
  parent_id            BigInt                 @default(autoincrement())
  created_at           DateTime               @default(now()) @db.Timestamptz(6)
  reply_to             Json?                  @db.Json
  replies              Int?                   @default(0)
  likes                Int?                   @default(0)
  lesson_comment_likes lesson_comment_likes[]
  users                users                  @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lessons              lessons                @relation(fields: [page_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lesson_comments_lesson_id_fkey")
}

model lesson_likes {
  lesson_id BigInt   @default(autoincrement())
  user_id   BigInt   @default(autoincrement())
  liked_at  DateTime @default(now()) @db.Timestamptz(6)
  lessons   lessons  @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([lesson_id, user_id])
}

model lesson_statuses {
  user_id   BigInt  @default(autoincrement())
  lesson_id BigInt  @default(autoincrement())
  lessons   lessons @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, lesson_id])
}

model lesson_visibility {
  lesson_id BigInt  @default(autoincrement())
  user_id   BigInt  @default(autoincrement())
  lessons   lessons @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([lesson_id, user_id])
}

model lessons {
  id                BigInt              @id @default(autoincrement())
  admin_id          BigInt              @default(autoincrement())
  group_id          BigInt              @default(autoincrement())
  title             String              @db.VarChar(256)
  description       String?             @db.VarChar(256)
  content           String
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  cover_image_url   String?
  prev_lesson       BigInt              @default(autoincrement())
  next_lesson       BigInt              @default(autoincrement())
  is_public         Boolean?
  likes             Int                 @default(0)
  comments          Int                 @default(0)
  pinned            Boolean?            @default(false)
  lesson_comments   lesson_comments[]
  lesson_likes      lesson_likes[]
  lesson_statuses   lesson_statuses[]
  lesson_visibility lesson_visibility[]
  users             users               @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  groups            groups              @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post_visibility   post_visibility[]
}

model notifications {
  id           BigInt   @id @default(autoincrement())
  user_id      BigInt   @default(autoincrement())
  notification String   @db.VarChar(256)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  type         String   @db.VarChar(256)
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model onboarding_answers {
  id                   BigInt               @id @default(autoincrement())
  question_id          BigInt               @default(autoincrement())
  user_id              BigInt               @default(autoincrement())
  answer               String
  onboarding_questions onboarding_questions @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                users                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model onboarding_forms {
  id         BigInt  @id @default(autoincrement())
  group_id   BigInt  @default(autoincrement())
  is_enabled Boolean @default(true)
  groups     groups  @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model onboarding_questions {
  id                 BigInt               @id @default(autoincrement())
  group_id           BigInt               @default(autoincrement())
  question           String
  position           Int
  onboarding_answers onboarding_answers[]
  groups             groups               @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model payments {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id           BigInt   @default(autoincrement())
  group_id          BigInt   @default(autoincrement())
  stripe_payment_id String   @db.VarChar(256)
  amount            Decimal  @db.Decimal
  status            String   @db.VarChar(256)
  paid_at           DateTime @default(now()) @db.Timestamptz(6)
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  groups            groups   @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model payout_earnings {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  payout_id  String   @db.Uuid
  earning_id String   @db.Uuid
  amount     Decimal  @db.Decimal
  earnings   earnings @relation(fields: [earning_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payouts    payouts  @relation(fields: [payout_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model payouts {
  id               String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  admin_id         BigInt            @default(autoincrement())
  total_amount     Decimal           @db.Decimal
  payout_date      DateTime          @default(now()) @db.Timestamptz(6)
  stripe_payout_id String            @db.VarChar(256)
  status           String            @db.VarChar(256)
  created_at       DateTime          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?         @db.Timestamptz(6)
  payout_earnings  payout_earnings[]
  users            users             @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model post_comment_likes {
  comment_id    BigInt        @default(autoincrement())
  user_id       BigInt        @default(autoincrement())
  liked_at      DateTime      @default(now()) @db.Timestamptz(6)
  post_comments post_comments @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([comment_id, user_id])
}

model post_comments {
  id                 BigInt               @id @default(autoincrement())
  page_id            BigInt               @default(autoincrement())
  author_id          BigInt               @default(autoincrement())
  content            String
  parent_id          BigInt               @default(autoincrement())
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  reply_to           Json?                @db.Json
  replies            Int?                 @default(0)
  likes              Int?                 @default(0)
  post_comment_likes post_comment_likes[]
  users              users                @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts              posts                @relation(fields: [page_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_comments_post_id_fkey")
}

model post_likes {
  post_id  BigInt   @default(autoincrement())
  user_id  BigInt   @default(autoincrement())
  liked_at DateTime @default(now()) @db.Timestamptz(6)
  posts    posts    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users    users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, user_id])
}

model posts {
  id            BigInt          @id @default(autoincrement())
  author_id     BigInt          @default(autoincrement())
  group_id      BigInt          @default(autoincrement())
  title         String          @db.VarChar(256)
  content       String
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  pinned        Boolean?        @default(false)
  likes         Int             @default(0)
  comments      Int             @default(0)
  channel_id    BigInt?
  post_comments post_comments[]
  post_likes    post_likes[]
  users         users           @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  channels      channels?       @relation(fields: [channel_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  groups        groups          @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model social_links {
  id       BigInt @id @default(autoincrement())
  user_id  BigInt @default(autoincrement())
  platform String @db.VarChar(256)
  url      String @db.VarChar(256)
  users    users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, platform], map: "user_platform_idx")
}

model users {
  id                   BigInt                 @id @default(autoincrement())
  email                String                 @unique @db.VarChar(256)
  password             String                 @db.VarChar(256)
  firstname            String                 @db.VarChar(256)
  lastname             String                 @db.VarChar(256)
  profile_picture_url  String?
  bio                  String?
  email_verified_at    DateTime?              @db.Timestamptz(6)
  created_at           DateTime               @default(now()) @db.Timestamptz(6)
  last_login           DateTime?              @db.Timestamptz(6)
  instagram            String?                @db.VarChar(255)
  facebook             String?                @db.VarChar(255)
  twitter              String?                @db.VarChar(255)
  youtube              String?                @db.VarChar(255)
  linkedin             String?                @db.VarChar(255)
  website              String?                @db.VarChar(255)
  dark_mode            Boolean?               @default(false)
  provider             String                 @default("credentials") @db.VarChar(50)
  diary                diary[]
  earnings             earnings[]
  event_attendees      event_attendees[]
  group_members        group_members[]
  groups               groups[]
  lesson_comment_likes lesson_comment_likes[]
  lesson_comments      lesson_comments[]
  lesson_likes         lesson_likes[]
  lesson_statuses      lesson_statuses[]
  lesson_visibility    lesson_visibility[]
  lessons              lessons[]
  notifications        notifications[]
  onboarding_answers   onboarding_answers[]
  payments             payments[]
  payouts              payouts[]
  post_comment_likes   post_comment_likes[]
  post_comments        post_comments[]
  post_likes           post_likes[]
  post_visibility      post_visibility[]
  posts                posts[]
  social_links         social_links[]
}

model channels {
  id       BigInt  @id @default(autoincrement())
  group_id BigInt  @default(autoincrement())
  channel  String  @db.VarChar(50)
  groups   groups  @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts    posts[]
}

model post_visibility {
  id         Int       @id @default(autoincrement())
  lesson_id  BigInt
  user_id    BigInt?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  lessons    lessons   @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post")
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@unique([lesson_id, user_id])
  @@index([lesson_id], map: "idx_post_visibility_post_id")
  @@index([lesson_id, user_id], map: "idx_post_visibility_post_user")
  @@index([user_id], map: "idx_post_visibility_user_id")
}
